/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from "../src/types";
import * as photon from "@generated/photon";

declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, "crud">;
    model: NexusPrisma<TypeName, "model">;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  AuthPayload: {
    // root type
    token: string; // String!
    user: NexusGenRootTypes["User"]; // User!
  };
  HelpRequest: photon.HelpRequest;
  Message: photon.Message;
  Mutation: {};
  Query: {};
  User: photon.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {}

export interface NexusGenFieldTypes {
  AuthPayload: {
    // field return type
    token: string; // String!
    user: NexusGenRootTypes["User"]; // User!
  };
  HelpRequest: {
    // field return type
    fulfiller: NexusGenRootTypes["User"] | null; // User
    id: string; // ID!
    matched: boolean; // Boolean!
    messages: NexusGenRootTypes["Message"][] | null; // [Message!]
    owner: NexusGenRootTypes["User"] | null; // User
  };
  Message: {
    // field return type
    body: string; // String!
    createdAt: any; // DateTime!
    id: string; // ID!
    owner: NexusGenRootTypes["User"]; // User!
    request: NexusGenRootTypes["HelpRequest"]; // HelpRequest!
    updatedAt: any; // DateTime!
  };
  Mutation: {
    // field return type
    clearAlRequests: boolean; // Boolean!
    login: NexusGenRootTypes["AuthPayload"]; // AuthPayload!
    sendMessage: NexusGenRootTypes["Message"]; // Message!
    signup: NexusGenRootTypes["AuthPayload"]; // AuthPayload!
    submitHelpRequest: NexusGenRootTypes["HelpRequest"] | null; // HelpRequest
  };
  Query: {
    // field return type
    currentConversation: NexusGenRootTypes["HelpRequest"] | null; // HelpRequest
    helpRequests: NexusGenRootTypes["HelpRequest"][]; // [HelpRequest!]!
    me: NexusGenRootTypes["User"]; // User!
  };
  User: {
    // field return type
    email: string; // String!
    fulfilledRequests: NexusGenRootTypes["HelpRequest"][] | null; // [HelpRequest!]
    helpRequests: NexusGenRootTypes["HelpRequest"][] | null; // [HelpRequest!]
    id: string; // ID!
    name: string | null; // String
  };
}

export interface NexusGenArgTypes {
  HelpRequest: {
    messages: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    };
  };
  Mutation: {
    login: {
      // args
      email?: string | null; // String
      password?: string | null; // String
    };
    sendMessage: {
      // args
      body?: string | null; // String
      helpRequestId?: string | null; // ID
    };
    signup: {
      // args
      email?: string | null; // String
      name?: string | null; // String
      password?: string | null; // String
    };
    submitHelpRequest: {
      // args
      healthScore: number; // Int!
    };
  };
  Query: {
    helpRequests: {
      // args
      matched?: boolean | null; // Boolean
    };
  };
  User: {
    fulfilledRequests: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    };
    helpRequests: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | "AuthPayload"
  | "HelpRequest"
  | "Message"
  | "Mutation"
  | "Query"
  | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames =
  | "Boolean"
  | "DateTime"
  | "Float"
  | "ID"
  | "Int"
  | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}
